# SPDX-License-Identifier: BSD-2-Clause
# 
# Copyright (c) 2020 NKI/AVL, Netherlands Cancer Institute
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

firstTarget: all
empty =
space = $(empty) $(empty)

CXX					= @CXX@
CXXFLAGS			= @BOOST_CPPFLAGS@ \
					  @CXXFLAGS@ \
					  @CPPFLAGS@ \
					  @PTHREAD_CFLAGS@ \
					  @GTK3_CFLAGS@ \
					  @ZEEP_CFLAGS@ \
					  @PINCH_CFLAGS@
LDFLAGS				= @BOOST_LDFLAGS@ \
					  @LDFLAGS@ \
					  @PTHREAD_CFLAGS@
LIBS				= @PTHREAD_LIBS@ \
					  @GTK3_LIBS@ \
					  @ZEEP_LIBS@ \
					  @BOOST_PROGRAM_OPTIONS_LIB@ \
					  @BOOST_IOSTREAMS_LIB@ \
					  @BOOST_DATE_TIME_LIB@ \
					  @PINCH_LIBS@ \
					  @LIBS@

prefix				= $(DESTDIR)@prefix@
exec_prefix			= @exec_prefix@
bindir				= @bindir@
datarootdir			= @datarootdir@
datadir				= @datadir@
mandir				= @mandir@

GNUmakefile: config.status GNUmakefile.in
	$(SHELL) ./config.status

# main build variables
PROGRAM				= @PACKAGE_NAME@

VERSION				= @PACKAGE_VERSION@

SEARCH_PATHS		= src test lib lib/Gtk lib/X11
CXXFLAGS			+= $(SEARCH_PATHS:%=-I%)

OBJECTS = \
	MAddTOTPHashDialog.o \
	MAuthDialog.o \
	MConnectDialog.o \
	MHTTPProxy.o \
	MPortForwardingDialog.o \
	MPreferencesDialog.o \
	MSaltApp.o \
	MSearchPanel.o \
	MTerminalBuffer.o \
	MTerminalChannel.o \
	MTerminalColours.o \
	MTerminalView.o \
	MTerminalWindow.o \
	MAcceleratorTable.o \
	MAlerts.o \
	MAnimation.o \
	MApplication.o \
	MCanvas.o \
	MClipboard.o \
	MColor.o \
	MColorPicker.o \
	MController.o \
	MControls.o \
	MDevice.o \
	MDialog.o \
	MDocApplication.o \
	MDocument.o \
	MDocWindow.o \
	MError.o \
	MFile.o \
	MHandler.o \
	MLib.o \
	MMenu.o \
	MPreferences.o \
	MPrinter.o \
	MResources.o \
	MStrings.o \
	MTypes.o \
	MUnicode.o \
	MUtils.o \
	MView.o \
	MWindow.o \
	MGtkAlerts.o \
	MGtkAnimationImpl.o \
	MGtkApplicationImpl.o \
	MGtkCanvasImpl.o \
	MGtkClipboardImpl.o \
	MGtkControlsImpl.o \
	MGtkDeviceImpl.o \
	MGtkDialogImpl.o \
	MGtkDocClosedNotifier.o \
	MGtkError.o \
	MGtkFile.o \
	MGtkList.o \
	MGtkMain.o \
	MGtkMenu.o \
	MGtkResources.o \
	MGtkSound.o \
	MGtkUtils.o \
	MGtkWidgetMixin.o \
	MGtkWindowImpl.o \
	MPrimary.o \
	bsd-closefrom.o

RESOURCES = \
	Menus/terminal-window-menu.xml \
	Alerts/only-openssh-server-supported.xml \
	Alerts/algo-unsupported.xml \
	Alerts/failed-to-install-public-key.xml \
	Alerts/close-session-alert.xml \
	Alerts/error-alert.xml \
	Alerts/old.xml \
	Alerts/about-alert.xml \
	Alerts/host-key-changed-alert.xml \
	Alerts/unknown-host-alert.xml \
	Alerts/expired.xml \
	Alerts/installed-public-key.xml \
	Alerts/exception-alert.xml \
	Alerts/close-all-sessions-alert.xml \
	Icons/appicon-small.ico \
	close.png \
	version.rc \
	templates/status.html \
	templates/style.css \
	templates/index.html \
	templates/error.html \
	salt.desktop \
	Icons/appicon.png \
	Dialogs/connect-dialog.xml \
	Dialogs/color-picker.xml \
	Dialogs/http-proxy-dialog.xml \
	Dialogs/prefs-dialog.xml \
	Dialogs/find-dialog.xml \
	Dialogs/auth-dialog.xml \
	Dialogs/port-forwarding-dialog.xml \
	Dialogs/socks5-proxy-dialog.xml \
	Dialogs/add-totp-hash.xml \
	strings.xml.nl \
	MakeRes.pl \
	Icons/appicon-small.png \
	Icons/appicon.ico

RESOURCES := $(RESOURCES:%=rsrc/%)

# Use the DEBUG flag to build debug versions of the code
DEBUG				= @DEBUG@

ifeq "$(DEBUG)" "1"
DEFINES				+= DEBUG
CXXFLAGS            += -g -O0
LDFLAGS				+= -g
else
CXXFLAGS			+= -O2
DEFINES				+= NDEBUG
endif

MRC					= @MRC@
USE_RSRC			= @USE_RSRC@

VPATH += $(subst $(space),:,$(SEARCH_PATHS))

CXXFLAGS            += -Wall -Wno-multichar
CXXFLAGS			+= $(DEFINES:%=-D%)

OBJDIR = obj
ifeq "$(DEBUG)" "1"
	OBJDIR	:= $(OBJDIR).dbg
endif

$(OBJDIR):
	mkdir -p $(OBJDIR)

$(OBJDIR)/%.o: %.cpp | $(OBJDIR)
	@ echo ">>" $<
	@ $(CXX) -MD -c -o $@ $< $(CFLAGS) $(CXXFLAGS)

$(OBJDIR)/%.o: %.c | $(OBJDIR)
	@ echo ">>" $<
	@ $(CXX) -MD -c -o $@ $< $(CFLAGS) $(CXXFLAGS)

# We have development releases and official releases, for each we
# maintain different versioning schemes.

ifneq "x@UPDATE_REVISION@" "x"

REVISION = $(shell git log --pretty=format:%h --max-count=1)
REVISION_FILE = version-info-$(REVISION).txt

$(REVISION_FILE):
	rm -f version-info-*.txt
	@ echo $(PROGRAM)-version: $(VERSION) > $@
	@ git describe --match=build --dirty >> $@
	@ git log --pretty=medium --date=iso8601 -1 >> $@

src/revision.hpp: $(REVISION_FILE)
	@ echo 'const char kRevision[] = R"(' > $@
	@ cat $? >> $@
	@ echo ')";' >> $@

else

src/revision.hpp:
	@ echo 'const char kRevision[] = R"(' > $@
	@ echo $(PROGRAM)-version: $(VERSION) >> $@
	@ echo Date:   $$(date --iso-8601) >> $@
	@ echo ')";' >> $@

endif

# The program rules

ifneq "$(USE_RSRC)" "0"

OBJECTS += $(PROGRAM)_rsrc.o

# dictionaries may be found compressed
%.dic: %.dic.gz
	gunzip -c $^ > $@

$(OBJDIR)/$(PROGRAM)_rsrc.o: $(RESOURCES)
	$(MRC) -o $@ $^

endif

$(OBJDIR)/$(PROGRAM).o: src/revision.hpp

$(PROGRAM): $(OBJECTS:%.o=$(OBJDIR)/%.o)
	@ echo '->' $@
	@ $(CXX) -o $@ $^ $(CXXFLAGS) $(LDFLAGS) $(LIBS)

$(OBJDIR)/%.d: $(OBJDIR)/%.o

-include $(OBJECTS:%.o=$(OBJDIR)/%.d)

.PHONY: clean all
clean:
	rm -rf $(PROGRAM) $(OBJDIR)/* src/revision.hpp

all: $(PROGRAM)

.PHONY: install
install: $(PROGRAM)
	install -d $(bindir)
	install $(PROGRAM) $(bindir)/$(PROGRAM)
	install -d $(mandir)/man1
	install -m 644 doc/$(PROGRAM).1 $(mandir)/man1/$(PROGRAM).1;
	gzip $(mandir)/man1/$(PROGRAM).1;

.PHONY: FORCE
FORCE:

.PHONY: test
test:
	@ echo $(OBJECTS)
